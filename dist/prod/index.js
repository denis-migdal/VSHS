globalThis.EventSource,EventTarget,globalThis.WebSocket,globalThis.Deno={upgradeWebSocket:function(t){const s=new e(null),n=new Response;return n.websocket=s,{socket:s,response:n}}};class e extends EventTarget{other=null;constructor(e){super(),null!==e&&(this.url=e,globalThis.fetch(e).then((async e=>{this.other=e.websocket,this.other.other=this,this.readyState=this.OPEN,this.dispatchEvent(new Event("open")),this.other.dispatchEvent(new Event("open"))})))}close(e,t){this.readyState=this.CLOSED;let s={};void 0!==e&&(s.code=e),void 0!==t&&(s.reason=t),this.other.dispatchEvent(new CloseEvent("close",s)),this.dispatchEvent(new CloseEvent("close",s))}send(e){this.other.dispatchEvent(new MessageEvent("message",{data:e}))}url="";onclose=null;onerror=null;onmessage=null;onopen=null;readyState=0;CONNECTING=0;OPEN=1;CLOSING=2;CLOSED=3;binaryType="arraybuffer";bufferedAmount=0;extensions="";protocol=""}
//# sourceMappingURL=index.js.map